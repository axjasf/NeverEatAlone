name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  PYTHON_ROOT: './backend'
  NODE_ROOT: './frontend'
  # Test Configuration
  COVERAGE_THRESHOLD: 80
  PYTEST_ADDOPTS: '--color=yes'
  # Environment Detection
  ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/develop' && 'staging' || 'development' }}
  # Debug Mode (enables verbose logging)
  DEBUG: ${{ github.event_name == 'pull_request' }}

jobs:
  backend-lint:
    name: Backend Linting
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.PYTHON_ROOT }}
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/develop' && 'staging' || 'development' }}
    env:
      DATABASE_URL: sqlite:///./dev.db
      TEST_DATABASE_URL: sqlite:///./test.db
      SECRET_KEY: ${{ secrets.SECRET_KEY || 'dev-secret-key-123' }}
      CORS_ORIGINS: ${{ secrets.CORS_ORIGINS || 'http://localhost:3000' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        id: install
        run: |
          echo "::group::Environment Information"
          python --version
          pip --version
          echo "Working directory: $(pwd)"
          echo "Python path: $(which python)"
          echo "::endgroup::"

          echo "::group::Upgrade pip"
          python -m pip install --upgrade pip
          echo "::endgroup::"

          echo "::group::Install project dependencies"
          pip install -r requirements.txt
          echo "::endgroup::"

          echo "::group::Install dev dependencies"
          pip install -r requirements-dev.txt
          echo "::endgroup::"

      - name: Run Black formatter
        id: black
        continue-on-error: true
        run: |
          echo "::group::Running Black formatter check"
          python -m black . --check --diff || (
            echo "::error::Black formatting issues found. Run 'black .' locally to fix."
            exit 1
          )
          echo "::endgroup::"

      - name: Run Flake8
        id: flake8
        continue-on-error: true
        run: |
          echo "::group::Running Flake8"
          python -m flake8 . --format='::error file=%(path)s,line=%(row)d,col=%(col)d::%(text)s'
          echo "::endgroup::"

      - name: Run MyPy
        id: mypy
        continue-on-error: true
        run: |
          echo "::group::Running MyPy"
          python -m mypy . --pretty || (
            echo "::error::Type checking issues found"
            exit 1
          )
          echo "::endgroup::"

      - name: Check for linting failures
        if: steps.black.outcome == 'failure' || steps.flake8.outcome == 'failure' || steps.mypy.outcome == 'failure'
        run: |
          echo "::error::Linting checks failed. Please fix the issues above."
          exit 1

      - name: Upload linting results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-lint-results
          path: |
            .mypy_cache/
            .coverage
            flake8.log
          retention-days: 7
          if-no-files-found: warn

  backend-test:
    name: Backend Tests
    needs: backend-lint
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/develop' && 'staging' || 'development' }}
    env:
      DATABASE_URL: sqlite:///./test.db
      TEST_DATABASE_URL: sqlite:///./test.db
      SECRET_KEY: ${{ secrets.SECRET_KEY || 'test-secret-key-123' }}
      CORS_ORIGINS: http://localhost:3000
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: |
            ${{ env.PYTHON_ROOT }}/requirements.txt
            ${{ env.PYTHON_ROOT }}/requirements-dev.txt

      - name: Install dependencies
        id: install
        working-directory: ${{ env.PYTHON_ROOT }}
        run: |
          echo "::group::Environment Setup"
          python --version
          pip --version
          echo "Working directory: $(pwd)"
          echo "::endgroup::"

          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Run tests
        id: tests
        env:
          COVERAGE_FAIL_UNDER: ${{ env.COVERAGE_THRESHOLD }}
          PYTEST_ADDOPTS: ${{ env.PYTEST_ADDOPTS }} ${{ env.DEBUG && '-vv --capture=no' || '' }}
        run: |
          echo "::group::Running pytest with coverage"
          cd ${{ env.PYTHON_ROOT }}

          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Coverage threshold: ${{ env.COVERAGE_THRESHOLD }}%"

          # Run tests with retries for potentially flaky tests
          python -m pytest \
            --cov=app \
            --cov-report=xml:coverage.xml \
            --cov-report=term-missing \
            --junitxml=pytest-report.xml \
            -v \
            --reruns 2 \
            --reruns-delay 1 \
            ../tests || (
              echo "::error::Tests failed. Check the logs for details."
              exit 1
            )
          echo "::endgroup::"

      - name: Generate test summary
        if: always()
        run: |
          echo "::group::Test Summary"
          if [ -f pytest-report.xml ]; then
            echo "Test Results Summary:"
            python -m pytest --report-log=test-report.log || true
            cat test-report.log
          fi

          if [ -f coverage.xml ]; then
            echo "Coverage Summary:"
            python -m coverage report
          fi
          echo "::endgroup::"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results
          path: |
            ${{ env.PYTHON_ROOT }}/coverage.xml
            ${{ env.PYTHON_ROOT }}/pytest-report.xml
            ${{ env.PYTHON_ROOT }}/.coverage
            ${{ env.PYTHON_ROOT }}/logs/
          retention-days: 14

  frontend-lint:
    name: Frontend Linting
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.NODE_ROOT }}
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/develop' && 'staging' || 'development' }}
    env:
      REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL || 'http://localhost:8000' }}
      REACT_APP_ENVIRONMENT: ${{ github.event.ref == 'refs/heads/main' && 'production' || github.event.ref == 'refs/heads/develop' && 'staging' || 'development' }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.NODE_ROOT }}/package-lock.json

      - name: Install dependencies
        id: install
        run: |
          echo "::group::Environment Information"
          node --version
          npm --version
          echo "Working directory: $(pwd)"
          echo "::endgroup::"

          echo "::group::Install npm dependencies"
          npm ci
          echo "::endgroup::"

      - name: Run ESLint
        id: eslint
        continue-on-error: true
        run: |
          echo "::group::Running ESLint"
          npm run lint > eslint-report.txt || (
            echo "::error::ESLint issues found. Check the report for details."
            cat eslint-report.txt
            exit 1
          )
          echo "::endgroup::"

      - name: Run Type Check
        id: typecheck
        continue-on-error: true
        run: |
          echo "::group::Running TypeScript Check"
          npm run type-check > typescript-report.txt || (
            echo "::error::TypeScript issues found. Check the report for details."
            cat typescript-report.txt
            exit 1
          )
          echo "::endgroup::"

      - name: Check for linting failures
        if: steps.eslint.outcome == 'failure' || steps.typecheck.outcome == 'failure'
        run: |
          echo "::error::Frontend linting checks failed. Please fix the issues above."
          exit 1

      - name: Upload linting results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-lint-results
          path: |
            eslint-report.txt
            typescript-report.txt
          retention-days: 7
          if-no-files-found: warn

  frontend-test:
    name: Frontend Tests
    needs: frontend-lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.NODE_ROOT }}
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/develop' && 'staging' || 'development' }}
    env:
      REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL || 'http://localhost:8000' }}
      REACT_APP_ENVIRONMENT: ${{ github.event.ref == 'refs/heads/main' && 'production' || github.event.ref == 'refs/heads/develop' && 'staging' || 'development' }}
      REACT_APP_VERSION: ${{ github.sha }}
      CI: true
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.NODE_ROOT }}/package-lock.json

      - name: Install dependencies
        id: install
        run: |
          echo "::group::Environment Setup"
          node --version
          npm --version
          echo "Working directory: $(pwd)"
          echo "::endgroup::"

          npm ci

      - name: Run tests
        id: tests
        run: |
          echo "::group::Running Jest tests with coverage"
          mkdir -p coverage

          echo "Environment: ${{ env.REACT_APP_ENVIRONMENT }}"
          echo "Coverage threshold: ${{ env.COVERAGE_THRESHOLD }}%"

          npm run test:ci || (
            echo "::error::Tests failed. Check the coverage report for details."
            exit 1
          )
          echo "::endgroup::"

      - name: Generate test summary
        if: always()
        run: |
          echo "::group::Test Summary"
          if [ -d "coverage" ]; then
            echo "Coverage Report:"
            cat coverage/coverage-summary.json | jq -r '.total | to_entries | .[] | "\(.key): \(.value.pct)%"'
          fi
          echo "::endgroup::"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-test-results
          path: |
            coverage/
            junit.xml
          retention-days: 14
          if-no-files-found: warn

  build:
    name: Build
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/develop' && 'staging' || 'development' }}
    env:
      REACT_APP_API_URL: ${{ github.ref == 'refs/heads/main' && secrets.PROD_API_URL || github.ref == 'refs/heads/develop' && secrets.STAGING_API_URL || 'http://localhost:8000' }}
      REACT_APP_ENVIRONMENT: ${{ github.event.ref == 'refs/heads/main' && 'production' || github.event.ref == 'refs/heads/develop' && 'staging' || 'development' }}
      REACT_APP_VERSION: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.NODE_ROOT }}/package-lock.json

      - name: Build frontend
        id: build
        working-directory: ${{ env.NODE_ROOT }}
        run: |
          echo "::group::Environment Information"
          node --version
          npm --version
          echo "Environment: ${{ env.REACT_APP_ENVIRONMENT }}"
          echo "::endgroup::"

          echo "::group::Install dependencies"
          npm ci
          echo "::endgroup::"

          echo "::group::Build frontend"
          npm run build || (
            echo "::error::Build failed. Check the logs for details."
            exit 1
          )
          echo "::endgroup::"

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ${{ env.NODE_ROOT }}/build
          retention-days: 14
