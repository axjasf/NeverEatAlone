name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  PYTHON_ROOT: './backend'
  NODE_ROOT: './frontend'
  # Test Configuration
  COVERAGE_THRESHOLD: 80
  PYTEST_ADDOPTS: '--color=yes'
  # Environment Detection
  ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/develop' && 'staging' || 'development' }}
  # Debug Mode (enables verbose logging)
  DEBUG: ${{ github.event_name == 'pull_request' }}
  # SonarCloud Configuration
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  SONAR_ORGANIZATION: ${{ secrets.SONAR_ORGANIZATION }}

jobs:
  backend-lint:
    name: Backend Linting
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.PYTHON_ROOT }}
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/develop' && 'staging' || 'development' }}
    env:
      DATABASE_URL: sqlite:///./dev.db
      TEST_DATABASE_URL: sqlite:///./test.db
      SECRET_KEY: ${{ secrets.SECRET_KEY || 'dev-secret-key-123' }}
      CORS_ORIGINS: ${{ secrets.CORS_ORIGINS || 'http://localhost:3000' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        id: install
        run: |
          echo "::group::Environment Information"
          python --version
          pip --version
          echo "Working directory: $(pwd)"
          echo "Python location: $(which python)"
          echo "::endgroup::"

          echo "::group::Upgrade pip"
          python -m pip install --upgrade pip
          echo "::endgroup::"

          echo "::group::Install project dependencies"
          pip install -r requirements.txt
          echo "::endgroup::"

          echo "::group::Install dev dependencies"
          pip install -r requirements-dev.txt
          echo "::endgroup::"

      - name: Run Black formatter
        id: black
        if: success() || failure()  # Run even if previous steps failed
        continue-on-error: true  # Allow the workflow to continue even if Black fails
        run: |
          echo "::group::Running Black formatter check"
          python -m black . --check --diff > black_check.log 2>&1
          BLACK_EXIT=$?
          if [ $BLACK_EXIT -ne 0 ]; then
            echo "::warning::Black formatting issues found"
            echo "Black Formatting Issues" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            cat black_check.log >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "Black: ✅ No formatting issues found" >> $GITHUB_STEP_SUMMARY
          fi
          exit $BLACK_EXIT

      - name: Run Flake8
        id: flake8
        if: success() || failure()
        continue-on-error: true  # Allow the workflow to continue even if Flake8 fails
        run: |
          echo "::group::Running Flake8"
          python -m flake8 . --config config/.flake8 --count --statistics --show-source --tee --output-file=flake8_report.txt
          FLAKE8_EXIT=$?
          if [ $FLAKE8_EXIT -ne 0 ]; then
            echo "::warning::Flake8 issues found"
            echo "Flake8 Issues" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            cat flake8_report.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "Flake8: ✅ No issues found" >> $GITHUB_STEP_SUMMARY
          fi
          exit $FLAKE8_EXIT

      - name: Run MyPy
        id: mypy
        if: success() || failure()
        continue-on-error: true  # Allow the workflow to continue even if MyPy fails
        run: |
          echo "::group::Running MyPy"
          python -m mypy --config-file config/mypy.ini . > mypy_report.txt 2>&1
          MYPY_EXIT=$?
          if [ $MYPY_EXIT -ne 0 ]; then
            echo "::warning::Type checking issues found"
            echo "MyPy Issues" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            cat mypy_report.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          else
            echo "MyPy: ✅ No type checking issues found" >> $GITHUB_STEP_SUMMARY
          fi
          exit $MYPY_EXIT

      - name: Upload lint results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lint-results
          path: |
            ${{ env.PYTHON_ROOT }}/**/*.txt
            ${{ env.PYTHON_ROOT }}/**/*.log
            black_check.log
            flake8_report.txt
            mypy_report.txt
          retention-days: 14
          if-no-files-found: warn

  backend-test:
    name: Backend Tests
    needs: backend-lint  # Keep the dependency but tests will run anyway
    if: always()  # This ensures tests run even if linting fails
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/develop' && 'staging' || 'development' }}
    env:
      DATABASE_URL: sqlite:///./test.db
      TEST_DATABASE_URL: sqlite:///./test.db
      SECRET_KEY: ${{ secrets.SECRET_KEY || 'test-secret-key-123' }}
      CORS_ORIGINS: http://localhost:3000
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: |
            ${{ env.PYTHON_ROOT }}/requirements.txt
            ${{ env.PYTHON_ROOT }}/requirements-dev.txt

      - name: Install dependencies
        id: install
        working-directory: ${{ env.PYTHON_ROOT }}
        run: |
          echo "::group::Environment Setup"
          python --version
          pip --version
          echo "Working directory: $(pwd)"
          echo "::endgroup::"

          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install -e .

      - name: Run tests
        id: tests
        env:
          COVERAGE_FAIL_UNDER: ${{ env.COVERAGE_THRESHOLD }}
          PYTEST_ADDOPTS: ${{ env.PYTEST_ADDOPTS }} ${{ env.DEBUG && '-vv --capture=no' || '' }}
        run: |
          echo "::group::Running pytest with coverage"
          cd ${{ env.PYTHON_ROOT }}

          echo "Environment: ${{ env.ENVIRONMENT }}"
          echo "Coverage threshold: ${{ env.COVERAGE_THRESHOLD }}%"

          # Run tests with retries for potentially flaky tests
          python -m pytest \
            --cov=app \
            --cov-report=xml:coverage.xml \
            --cov-report=term-missing \
            --junitxml=test-results.xml \
            -v \
            --reruns 2 \
            --reruns-delay 1 \
            ../tests || (
              echo "::error::Tests failed. Check the logs for details."
              exit 1
            )
          echo "::endgroup::"

      - name: Generate test summary
        if: always()
        run: |
          echo "::group::Test Summary"
          if [ -f test-results.xml ]; then
            echo "Test Results Summary:"
            python -m pytest --report-log=test-report.log || true
            cat test-report.log
          fi

          if [ -f coverage.xml ]; then
            echo "Coverage Summary:"
            python -m coverage report
          fi
          echo "::endgroup::"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results
          path: |
            ${{ env.PYTHON_ROOT }}/coverage.xml
            ${{ env.PYTHON_ROOT }}/test-results.xml
            ${{ env.PYTHON_ROOT }}/.coverage
            ${{ env.PYTHON_ROOT }}/logs/
          retention-days: 14

  frontend-lint:
    name: Frontend Linting
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.NODE_ROOT }}
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/develop' && 'staging' || 'development' }}
    env:
      REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL || 'http://localhost:8000' }}
      REACT_APP_ENVIRONMENT: ${{ github.event.ref == 'refs/heads/main' && 'production' || github.event.ref == 'refs/heads/develop' && 'staging' || 'development' }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.NODE_ROOT }}/package-lock.json

      - name: Install dependencies
        id: install
        run: |
          echo "::group::Environment Information"
          node --version
          npm --version
          echo "Working directory: $(pwd)"
          echo "::endgroup::"

          echo "::group::Install npm dependencies"
          npm ci
          echo "::endgroup::"

      - name: Run ESLint
        id: eslint
        continue-on-error: true
        run: |
          echo "::group::Running ESLint"
          npm run lint > eslint-report.txt || (
            echo "::error::ESLint issues found. Check the report for details."
            cat eslint-report.txt
            exit 1
          )
          echo "::endgroup::"

      - name: Run Type Check
        id: typecheck
        continue-on-error: true
        run: |
          echo "::group::Running TypeScript Check"
          npm run type-check > typescript-report.txt || (
            echo "::error::TypeScript issues found. Check the report for details."
            cat typescript-report.txt
            exit 1
          )
          echo "::endgroup::"

      - name: Check for linting failures
        if: steps.eslint.outcome == 'failure' || steps.typecheck.outcome == 'failure'
        run: |
          echo "::error::Frontend linting checks failed. Please fix the issues above."
          exit 1

      - name: Upload linting results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-lint-results
          path: |
            eslint-report.txt
            typescript-report.txt
          retention-days: 7
          if-no-files-found: warn

  frontend-test:
    name: Frontend Tests
    needs: frontend-lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.NODE_ROOT }}
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/develop' && 'staging' || 'development' }}
    env:
      REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL || 'http://localhost:8000' }}
      REACT_APP_ENVIRONMENT: ${{ github.event.ref == 'refs/heads/main' && 'production' || github.event.ref == 'refs/heads/develop' && 'staging' || 'development' }}
      REACT_APP_VERSION: ${{ github.sha }}
      CI: true
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.NODE_ROOT }}/package-lock.json

      - name: Install dependencies
        id: install
        run: |
          echo "::group::Environment Setup"
          node --version
          npm --version
          echo "Working directory: $(pwd)"
          echo "::endgroup::"

          npm ci

      - name: Run tests
        id: tests
        run: |
          echo "::group::Running Jest tests with coverage"
          mkdir -p coverage

          echo "Environment: ${{ env.REACT_APP_ENVIRONMENT }}"
          echo "Coverage threshold: ${{ env.COVERAGE_THRESHOLD }}%"

          npm run test:ci || (
            echo "::error::Tests failed. Check the coverage report for details."
            exit 1
          )
          echo "::endgroup::"

      - name: Generate test summary
        if: always()
        run: |
          echo "::group::Test Summary"
          if [ -d "coverage" ]; then
            echo "Coverage Report:"
            cat coverage/coverage-summary.json | jq -r '.total | to_entries | .[] | "\(.key): \(.value.pct)%"'
          fi
          echo "::endgroup::"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-test-results
          path: |
            coverage/
            junit.xml
          retention-days: 14
          if-no-files-found: warn

  build:
    name: Build
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest
    environment: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/develop' && 'staging' || 'development' }}
    env:
      REACT_APP_API_URL: ${{ github.ref == 'refs/heads/main' && secrets.PROD_API_URL || github.ref == 'refs/heads/develop' && secrets.STAGING_API_URL || 'http://localhost:8000' }}
      REACT_APP_ENVIRONMENT: ${{ github.event.ref == 'refs/heads/main' && 'production' || github.event.ref == 'refs/heads/develop' && 'staging' || 'development' }}
      REACT_APP_VERSION: ${{ github.sha }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.NODE_ROOT }}/package-lock.json

      - name: Build frontend
        id: build
        working-directory: ${{ env.NODE_ROOT }}
        run: |
          echo "::group::Environment Information"
          node --version
          npm --version
          echo "Environment: ${{ env.REACT_APP_ENVIRONMENT }}"
          echo "::endgroup::"

          echo "::group::Install dependencies"
          npm ci
          echo "::endgroup::"

          echo "::group::Build frontend"
          npm run build || (
            echo "::error::Build failed. Check the logs for details."
            exit 1
          )
          echo "::endgroup::"

      - name: Generate build summary
        if: always()
        run: |
          echo "=== Frontend Build Summary ===" > build_summary.txt
          echo "Date: $(date)" >> build_summary.txt
          echo "Node Version: ${{ env.NODE_VERSION }}" >> build_summary.txt
          echo "Build Version: $REACT_APP_VERSION" >> build_summary.txt
          echo "" >> build_summary.txt

          if [ -d "build" ]; then
            echo "Build Statistics:" >> build_summary.txt
            echo "- Total files: $(find build -type f | wc -l)" >> build_summary.txt
            echo "- Build size: $(du -sh build | cut -f1)" >> build_summary.txt

            echo "" >> build_summary.txt
            echo "Asset Sizes:" >> build_summary.txt
            find build -type f -exec ls -lh {} \; >> build_summary.txt
          else
            echo "Build directory not found" >> build_summary.txt
          fi

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: |
            ${{ env.NODE_ROOT }}/build
            build_summary.txt
          retention-days: 14

  sonarcloud:
    name: SonarCloud Analysis
    if: always()  # Run even if previous jobs fail
    needs: [backend-test]  # Keep the dependency but they won't block execution
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download backend test results
        uses: actions/download-artifact@v4
        continue-on-error: true  # Continue if artifacts are missing
        with:
          name: backend-test-results

      - name: Debug file locations
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in current directory:"
          ls -la
          echo "Files in backend directory (if exists):"
          ls -la backend || true

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.organization=axjasf
            -Dsonar.projectKey=axjasf_NeverEatAlone
            -Dsonar.sources=backend/app,frontend/src
            -Dsonar.tests=tests,frontend/src
            -Dsonar.test.inclusions=frontend/src/**/*.test.tsx,frontend/src/**/*.test.ts,tests/**/*_test.py
            -Dsonar.test.exclusions=frontend/src/setupTests.ts
            -Dsonar.python.coverage.reportPaths=backend/coverage.xml
            -Dsonar.python.xunit.reportPath=backend/test-results.xml
            -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info
            -Dsonar.coverage.exclusions=frontend/src/**/*.test.tsx,frontend/src/**/*.test.ts,tests/**/*_test.py
            -Dsonar.cpd.exclusions=frontend/src/**/*.test.tsx,frontend/src/**/*.test.ts
            -Dsonar.verbose=true

  workflow-summary:
    name: Generate Workflow Summary
    needs: [backend-lint, backend-test]  # Added sonarcloud dependency
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: all-artifacts

      - name: Generate workflow summary
        run: |
          echo "# Workflow Execution Summary" > workflow_summary.md
          echo "## Backend Results" >> workflow_summary.md

          if [ -d "all-artifacts/backend-test-results" ]; then
            echo "### Test Results" >> workflow_summary.md
            cat all-artifacts/backend-test-results/test_summary.txt >> workflow_summary.md
          fi

          if [ -d "all-artifacts/lint-results" ]; then
            echo "### Lint Results" >> workflow_summary.md
            for f in all-artifacts/lint-results/*.txt; do
              if [ -f "$f" ]; then
                echo "\`\`\`" >> workflow_summary.md
                cat "$f" >> workflow_summary.md
                echo "\`\`\`" >> workflow_summary.md
              fi
            done
          fi

          echo "## Frontend Results" >> workflow_summary.md

          if [ -d "all-artifacts/frontend-test-results" ]; then
            echo "### Test Results" >> workflow_summary.md
            cat all-artifacts/frontend-test-results/test_summary.txt >> workflow_summary.md
          fi

          if [ -d "all-artifacts/frontend-lint-results" ]; then
            echo "### Lint Results" >> workflow_summary.md
            cat all-artifacts/frontend-lint-results/lint_summary.txt >> workflow_summary.md
          fi

          if [ -d "all-artifacts/frontend-build" ]; then
            echo "### Build Results" >> workflow_summary.md
            cat all-artifacts/frontend-build/build_summary.txt >> workflow_summary.md
          fi

      - name: Upload workflow summary
        uses: actions/upload-artifact@v4
        with:
          name: workflow-summary
          path: workflow_summary.md
