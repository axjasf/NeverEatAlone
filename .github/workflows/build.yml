name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  PYTHON_ROOT: './backend'
  NODE_ROOT: './frontend'

jobs:
  backend-lint:
    name: Backend Linting
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.PYTHON_ROOT }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        id: install
        run: |
          echo "::group::Upgrade pip"
          python -m pip install --upgrade pip
          echo "::endgroup::"

          echo "::group::Install project dependencies"
          pip install -r requirements.txt
          echo "::endgroup::"

          echo "::group::Install dev dependencies"
          pip install -r requirements-dev.txt
          echo "::endgroup::"

      - name: Run linting
        if: success() || failure()  # Run even if install step fails
        run: |
          echo "::group::Running Black formatter check"
          python -m black . --check || echo "::warning::Black formatting issues found"
          echo "::endgroup::"

          echo "::group::Running Flake8"
          python -m flake8 . || echo "::warning::Flake8 issues found"
          echo "::endgroup::"

          echo "::group::Running MyPy"
          python -m mypy . || echo "::warning::Type checking issues found"
          echo "::endgroup::"

  backend-test:
    name: Backend Tests
    needs: backend-lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.PYTHON_ROOT }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        id: install
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run tests
        id: tests
        run: |
          echo "::group::Running pytest with coverage"
          python -m pytest tests \
            --cov=app \
            --cov-report=xml:coverage.xml \
            --cov-report=term-missing \
            --junitxml=pytest-report.xml \
            -v
          echo "::endgroup::"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-test-results
          path: |
            ${{ env.PYTHON_ROOT }}/coverage.xml
            ${{ env.PYTHON_ROOT }}/pytest-report.xml
          retention-days: 14

  frontend-lint:
    name: Frontend Linting
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.NODE_ROOT }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.NODE_ROOT }}/package-lock.json

      - name: Install dependencies
        id: install
        run: |
          echo "::group::Install npm dependencies"
          npm ci
          echo "::endgroup::"

      - name: Run ESLint
        if: success() || failure()
        run: |
          echo "::group::Running ESLint"
          npm run lint || echo "::warning::ESLint issues found"
          echo "::endgroup::"

  frontend-test:
    name: Frontend Tests
    needs: frontend-lint
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ env.NODE_ROOT }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.NODE_ROOT }}/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        id: tests
        run: |
          echo "::group::Running Jest tests with coverage"
          npm test -- --coverage
          echo "::endgroup::"

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-test-results
          path: ${{ env.NODE_ROOT }}/coverage
          retention-days: 14

  build:
    name: Build
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: ${{ env.NODE_ROOT }}/package-lock.json

      - name: Build frontend
        working-directory: ${{ env.NODE_ROOT }}
        run: |
          echo "::group::Install dependencies"
          npm ci
          echo "::endgroup::"

          echo "::group::Build frontend"
          npm run build
          echo "::endgroup::"

      - name: Upload build artifacts
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: ${{ env.NODE_ROOT }}/build
          retention-days: 14
