name: Build and Analysis
on:
  push:
    branches:
      - main
      - develop
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build, Test, and Analyze
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      # Backend setup and tests
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install -r backend/requirements-dev.txt

      - name: Run Python tests with coverage
        run: |
          cd backend
          export PYTHONPATH=$PYTHONPATH:$(pwd)
          cd ..
          python -m pytest tests/models/domain/test_reminder.py tests/models/orm/test_reminder.py tests/repositories/test_reminder_repository.py --cov=backend/app --cov-report=xml:backend/coverage.xml --cov-report=term-missing --junitxml=backend/pytest-report.xml -v

      # Frontend setup and tests
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Node.js dependencies
        working-directory: ./frontend
        run: |
          npm ci
          npm install -g typescript

      - name: Run TypeScript tests with coverage
        working-directory: ./frontend
        run: |
          npm run test -- --coverage --coverageReporters=lcov --coverageReporters=text-summary --passWithNoTests

      # Code Quality Checks
      - name: Run Python linting
        working-directory: ./backend
        run: |
          flake8 .
          black --check .
          isort --check-only .

      - name: Run TypeScript linting
        working-directory: ./frontend
        run: |
          npm run lint
          npm run type-check

      # SonarQube analysis
      - name: Pre-Scan Debug Info
        run: |
          echo "=== Environment Info ==="
          echo "Current branch: ${GITHUB_REF#refs/heads/}"
          echo "GitHub event: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Workspace: ${{ github.workspace }}"

          echo "=== Directory Structure ==="
          pwd
          ls -la

          echo "=== Coverage Files ==="
          ls -la backend/coverage.xml || echo "coverage.xml not found"
          ls -la backend/pytest-report.xml || echo "pytest-report.xml not found"
          ls -la frontend/coverage/lcov.info || echo "lcov.info not found"

          echo "=== Git Info ==="
          git branch
          git status

          echo "=== SonarQube Config ==="
          cat sonar-project.properties

      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.projectKey=NeverEatAlone
            -Dsonar.sources=backend/app,frontend/src
            -Dsonar.tests=tests,frontend/tests
            -Dsonar.python.coverage.reportPaths=backend/coverage.xml
            -Dsonar.python.xunit.reportPath=backend/pytest-report.xml
            -Dsonar.javascript.lcov.reportPaths=frontend/coverage/lcov.info
            -Dsonar.python.version=3.11
            -Dsonar.sourceEncoding=UTF-8
            -Dsonar.verbose=true
            -Dsonar.scm.provider=git
            -Dsonar.branch.name=${GITHUB_REF#refs/heads/}
            -Dsonar.github.oauth=${{ github.token }}
            -Dsonar.host.url=${{ secrets.SONAR_HOST_URL }}
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}
            -X

      - name: Post-Scan Debug Info
        if: always()
        run: |
          echo "=== SonarQube Scan Complete ==="
          echo "Checking for analysis reports..."
          find . -name ".scannerwork" -type d -exec ls -la {} \;

          echo "=== Environment Variables ==="
          env | grep -i sonar || true

          echo "=== Testing SonarQube Connection ==="
          curl -I ${{ secrets.SONAR_HOST_URL }} || echo "Failed to connect to SonarQube server"

      # Upload test results as artifacts
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            backend/coverage.xml
            backend/pytest-report.xml
            frontend/coverage/lcov.info
